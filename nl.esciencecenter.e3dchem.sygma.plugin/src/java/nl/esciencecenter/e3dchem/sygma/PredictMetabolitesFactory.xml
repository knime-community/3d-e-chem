<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="./default.png" type="Predictor"
	xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v2.10 http://knime.org/node/v2.10.xsd">
	<name>SyGMa Metabolites</name>

	<shortDescription>
		Predict metabolites from parent molecules using Sygma (
		<a href="https://github.com/3D-e-Chem/sygma">https://github.com/3D-e-Chem/sygma</a>
		).
	</shortDescription>

	<fullDescription>
		<intro>
			Predict metabolites from parent molecules using Sygma (
			<a href="https://github.com/3D-e-Chem/sygma">https://github.com/3D-e-Chem/sygma</a>
			).

			<h2>Resolving "'sygma' Python package not found" error</h2>
			<p>
				This node requires the '
				<a href="https://pypi.python.org/pypi/SyGMa/">sygma</a>
				' Python package.
			</p>
			<p>
				If the sygma Python package was not installed then go to
				<a href="https://github.com/3D-e-Chem/sygma#installation">https://github.com/3D-e-Chem/sygma#installation</a>
				and follow the installation instructions.
				To test if the package is installed run
				<i>sygma --version</i>
				on the command line, it should print a version number if installed.
			</p>
			<p>
				If the sygma Python package was already installed then make sure that
				KNIME is using the same Python executable.
				In the File menu > Preferences > KNIME > Python make sure the path to
				the Python executable is the same Python which has the sygma package
				installed.
			</p>
		</intro>

		<option name="Parents molecule column">Column containing molecules which will be
			metabolized.</option>
		<option name="Phase 1 cycles">Number of times phase 1 rules should be applied
		</option>
		<option name="Phase 2 cycles">Number of times phase 2 rules should be applied
		</option>
		<tab name="Python options">
			<option name="Use python version">
				Allows to choose the python version that
				should be used for
				executing the kernel. Available
				installations can be checked
				under Preferences → KNIME →
				Python.
			</option>
			<option name="Missing values (Int, Long)">
				By default, Int and Long columns containing
				missing values are
				converted to doubles in Python, because
				doubles
				are the
				only numeric type
				containing a built-in missing
				value
				representation (NaN). Converting longs to doubles,
				however,
				introduces imprecision. The
				conversion may be
				avoided
				by replacing
				missing values with so-called sentinel values.
				To convert missing
				values to
				sentinel values before script
				execution, check the first
				option, to convert sentinel values
				back to missing values after
				script execution, check the
				second option. To select a sentinel
				value, click on
				MIN_VAL
				(the smallest possible value for the
				column's
				data type),
				MAX_VAL (the largest possible
				value for the column's data
				type), or a manually enter an integer in the text field.
			</option>
			<option name="Rows per chunk">
				Large tables are broken into chunks when
				they are transferred between
				Python and Java. This option
				controls how many rows are
				included in
				each chunk. The default
				value is intended for tables containing few
				columns having
				numeric types. If larger data types like
				images or text
				are
				transferred, a single chunk may exceed the
				maximum allowed
				buffer size. In this case lowering the value of this
				parameter helps getting reasonably sized chunks.
			</option>
		</tab>
	</fullDescription>

	<ports>
		<inPort index="0" name="Parents">Parent molecules</inPort>
		<!-- possibly more input ports here -->
		<outPort index="0" name="Predictions">Predicted metabolites</outPort>
		<!-- possibly more output ports here -->
	</ports>
	<views>
	</views>
</knimeNode>
