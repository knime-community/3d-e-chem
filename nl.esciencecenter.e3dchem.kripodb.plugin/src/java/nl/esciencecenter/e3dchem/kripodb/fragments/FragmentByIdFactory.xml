<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="./default.png" type="Manipulator"
	xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v2.10 http://knime.org/node/v2.10.xsd">
	<name>Fragment information (local files)</name>

	<shortDescription>
		Find Kripo fragment information by their identifier.
	</shortDescription>

	<fullDescription>
		<intro>
			<p>
				KRIPO stands for
				<a href="http://dx.doi.org/10.1186/1758-2946-6-S1-O26">Key Representation of Interaction in POckets</a>
				.
			</p>
			<p>
				Find Kripo fragment information by their identifier.
			</p>
			<p>
				Information includes the fragment molecule and it's associated protein
				identifiers.
			</p>
			<h2>Resolving "Library kripodb.canned is missing" error</h2>
			<p>
				This node requires the
				<a href="https://github.com/3D-e-Chem/kripodb">kripodb</a>
				Python package.
			</p>
			<p>
				If the kripodb Python package was not installed then go to
				<a href="https://github.com/3D-e-Chem/kripodb#install">https://github.com/3D-e-Chem/kripodb#install</a>
				and follow the installation instructions.
				To test if the package is installed run
				<i>kripodb --version</i>
				on the command line, it should print a version number if installed.
			</p>
			<p>
				If the kripodb Python package was already installed then make sure
				that KNIME is using the same Python executable.
				In the File menu > Preferences > KNIME > Python make sure the path to
				the Python executable is the same Python which has the kripodb
				package installed. KNIME can use Python version 2 or 3, 
				the node should have the Python version selected which has the Python package installed.
			</p>
		</intro>

		<tab name="Options">
			<option name="Identifiers">The column containing the Kripo identifiers
			</option>
			<option name="Fragments database (Selected File)">
				Location of Kripo fragments database, can be the base url of kripodb
				webservice or a local SQLite file.
				<p>
					Available datasets:
					<ul>
						<li>
							Protein Data Bank, use web service at
							<a href="http://3d-e-chem.vu-compmedchem.nl/kripodb">http://3d-e-chem.vu-compmedchem.nl/kripodb</a>
							or download from
							<a href="http://3d-e-chem.vu-compmedchem.nl/kripodb/fragments.sqlite">here</a>
						</li>
						<li>
							Tiny example dataset, download from
							<a href="https://github.com/3D-e-Chem/kripodb/blob/master/data">here</a>
							, in 3D-e-Chem VM available at '/data/kripo/tiny/fragments.sqlite'
						</li>
						<li>
							GPCR, All fragments based on GPCR proteins compared with all
							proteins in PDB, download from
							<a href="http://dx.doi.org/10.5281/zenodo.50835">here</a>
							, in 3D-e-Chem VM available at
							'/data/kripo/gpcr/kripo.gpcrandhits.sqlite'
						</li>
					</ul>
				</p>
				<p>When combining this node with other Kripo nodes make sure the
					files are from the same dataset.
				</p>
				<p>
					For example getting a
					<b>KeyError: '&lt;fragment id&gt;' not found</b>
					error most likely means the '/data/kripo/pdb/fragments.sqlite' file
					is out of sync and must be re-downloaded from
					<a href="http://3d-e-chem.vu-compmedchem.nl/kripodb/fragments.sqlite">here</a>
				</p>
			</option>
			<option name="Type of identifier">Can be fragment or PDB code.</option>
		</tab>
		<tab name="Python options">
			<option name="Use python version">
				Allows to choose the python version that
				should be used for
				executing the kernel. Available
				installations can be checked
				under Preferences → KNIME →
				Python.
			</option>
			<option name="Missing values (Int, Long)">
				By default, Int and Long columns containing
				missing values are
				converted to doubles in Python, because
				doubles
				are the
				only numeric type
				containing a built-in missing
				value
				representation (NaN). Converting longs to doubles,
				however,
				introduces imprecision. The
				conversion may be
				avoided
				by replacing
				missing values with so-called sentinel values.
				To convert missing
				values to
				sentinel values before script
				execution, check the first
				option, to convert sentinel values
				back to missing values after
				script execution, check the
				second option. To select a sentinel
				value, click on
				MIN_VAL
				(the smallest possible value for the
				column's
				data type),
				MAX_VAL (the largest possible
				value for the column's data
				type), or a manually enter an integer in the text field.
			</option>
			<option name="Rows per chunk">
				Large tables are broken into chunks when
				they are transferred between
				Python and Java. This option
				controls how many rows are
				included in
				each chunk. The default
				value is intended for tables containing few
				columns having
				numeric types. If larger data types like
				images or text
				are
				transferred, a single chunk may exceed the
				maximum allowed
				buffer size. In this case lowering the value of this
				parameter helps getting reasonably sized chunks.
			</option>
		</tab>
	</fullDescription>

	<ports>
		<inPort index="0" name="Fragment identifier">Table with Kripo fragment identifiers.
		</inPort>
		<outPort index="0" name="Fragment information">Table with Kripo fragment information.
		</outPort>
	</ports>
	<views>
	</views>
</knimeNode>
