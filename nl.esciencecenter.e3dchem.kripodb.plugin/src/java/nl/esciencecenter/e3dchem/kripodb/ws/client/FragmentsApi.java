/*
 * Kripo API
 * API to interact with Kripo fragment, fingerprint and similarity data files.
 *
 * OpenAPI spec version: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package nl.esciencecenter.e3dchem.kripodb.ws.client;

import nl.esciencecenter.e3dchem.kripodb.ws.client.ApiCallback;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ApiClient;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ApiException;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ApiResponse;
import nl.esciencecenter.e3dchem.kripodb.ws.client.Configuration;
import nl.esciencecenter.e3dchem.kripodb.ws.client.Pair;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ProgressRequestBody;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import nl.esciencecenter.e3dchem.kripodb.ws.client.model.Error;
import java.io.File;
import nl.esciencecenter.e3dchem.kripodb.ws.client.model.Fragment;
import nl.esciencecenter.e3dchem.kripodb.ws.client.model.FragmentNotFound;
import nl.esciencecenter.e3dchem.kripodb.ws.client.model.FragmentsNotFound;
import nl.esciencecenter.e3dchem.kripodb.ws.client.model.Hit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FragmentsApi {
    private ApiClient apiClient;

    public FragmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FragmentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getFragmentPhar */
    private com.squareup.okhttp.Call getFragmentPharCall(String fragmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fragments/{fragment_id}.phar".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "fragment_id" + "\\}", apiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFragmentPharValidateBeforeCall(String fragmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getFragmentPhar(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFragmentPharCall(fragmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pharmacophore of fragment in phar format
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getFragmentPhar(String fragmentId) throws ApiException {
        ApiResponse<File> resp = getFragmentPharWithHttpInfo(fragmentId);
        return resp.getData();
    }

    /**
     * Pharmacophore of fragment in phar format
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getFragmentPharWithHttpInfo(String fragmentId) throws ApiException {
        com.squareup.okhttp.Call call = getFragmentPharValidateBeforeCall(fragmentId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pharmacophore of fragment in phar format (asynchronously)
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFragmentPharAsync(String fragmentId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFragmentPharValidateBeforeCall(fragmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFragmentSvg */
    private com.squareup.okhttp.Call getFragmentSvgCall(String fragmentId, Integer width, Integer height, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fragments/{fragment_id}.svg".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "fragment_id" + "\\}", apiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/svg+xml", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFragmentSvgValidateBeforeCall(String fragmentId, Integer width, Integer height, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getFragmentSvg(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFragmentSvgCall(fragmentId, width, height, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 2D drawing of fragment in SVG format
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @param width  (optional, default to 400)
     * @param height  (optional, default to 200)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getFragmentSvg(String fragmentId, Integer width, Integer height) throws ApiException {
        ApiResponse<File> resp = getFragmentSvgWithHttpInfo(fragmentId, width, height);
        return resp.getData();
    }

    /**
     * 2D drawing of fragment in SVG format
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @param width  (optional, default to 400)
     * @param height  (optional, default to 200)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getFragmentSvgWithHttpInfo(String fragmentId, Integer width, Integer height) throws ApiException {
        com.squareup.okhttp.Call call = getFragmentSvgValidateBeforeCall(fragmentId, width, height, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 2D drawing of fragment in SVG format (asynchronously)
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @param width  (optional, default to 400)
     * @param height  (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFragmentSvgAsync(String fragmentId, Integer width, Integer height, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFragmentSvgValidateBeforeCall(fragmentId, width, height, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFragments */
    private com.squareup.okhttp.Call getFragmentsCall(List<String> fragmentIds, List<String> pdbCodes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fragments".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fragmentIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "fragment_ids", fragmentIds));
        if (pdbCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "pdb_codes", pdbCodes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFragmentsValidateBeforeCall(List<String> fragmentIds, List<String> pdbCodes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getFragmentsCall(fragmentIds, pdbCodes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve fragments
     * 
     * @param fragmentIds Filter by fragment identifiers. e.g. 3j7u_NDP_frag24 (optional)
     * @param pdbCodes Filter by PDB identifier codes. e.g. 3j7u (optional)
     * @return List&lt;Fragment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Fragment> getFragments(List<String> fragmentIds, List<String> pdbCodes) throws ApiException {
        ApiResponse<List<Fragment>> resp = getFragmentsWithHttpInfo(fragmentIds, pdbCodes);
        return resp.getData();
    }

    /**
     * Retrieve fragments
     * 
     * @param fragmentIds Filter by fragment identifiers. e.g. 3j7u_NDP_frag24 (optional)
     * @param pdbCodes Filter by PDB identifier codes. e.g. 3j7u (optional)
     * @return ApiResponse&lt;List&lt;Fragment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Fragment>> getFragmentsWithHttpInfo(List<String> fragmentIds, List<String> pdbCodes) throws ApiException {
        com.squareup.okhttp.Call call = getFragmentsValidateBeforeCall(fragmentIds, pdbCodes, null, null);
        Type localVarReturnType = new TypeToken<List<Fragment>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve fragments (asynchronously)
     * 
     * @param fragmentIds Filter by fragment identifiers. e.g. 3j7u_NDP_frag24 (optional)
     * @param pdbCodes Filter by PDB identifier codes. e.g. 3j7u (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFragmentsAsync(List<String> fragmentIds, List<String> pdbCodes, final ApiCallback<List<Fragment>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFragmentsValidateBeforeCall(fragmentIds, pdbCodes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Fragment>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSimilarFragments */
    private com.squareup.okhttp.Call getSimilarFragmentsCall(String fragmentId, Double cutoff, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fragments/{fragment_id}/similar".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "fragment_id" + "\\}", apiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cutoff != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cutoff", cutoff));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSimilarFragmentsValidateBeforeCall(String fragmentId, Double cutoff, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getSimilarFragments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSimilarFragmentsCall(fragmentId, cutoff, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Similar fragments
     * Retrieve fragments similar to query based on Kripo fingerprint. Hits are ordered by decreasing similarity score (this score ranges from 0, completely dissimilar, to 1, identical). 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @param cutoff Similarity score cutoff. (optional, default to 0.45)
     * @param limit Maximum number of hits. (optional, default to 1000)
     * @return List&lt;Hit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Hit> getSimilarFragments(String fragmentId, Double cutoff, Integer limit) throws ApiException {
        ApiResponse<List<Hit>> resp = getSimilarFragmentsWithHttpInfo(fragmentId, cutoff, limit);
        return resp.getData();
    }

    /**
     * Similar fragments
     * Retrieve fragments similar to query based on Kripo fingerprint. Hits are ordered by decreasing similarity score (this score ranges from 0, completely dissimilar, to 1, identical). 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @param cutoff Similarity score cutoff. (optional, default to 0.45)
     * @param limit Maximum number of hits. (optional, default to 1000)
     * @return ApiResponse&lt;List&lt;Hit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Hit>> getSimilarFragmentsWithHttpInfo(String fragmentId, Double cutoff, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getSimilarFragmentsValidateBeforeCall(fragmentId, cutoff, limit, null, null);
        Type localVarReturnType = new TypeToken<List<Hit>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Similar fragments (asynchronously)
     * Retrieve fragments similar to query based on Kripo fingerprint. Hits are ordered by decreasing similarity score (this score ranges from 0, completely dissimilar, to 1, identical). 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @param cutoff Similarity score cutoff. (optional, default to 0.45)
     * @param limit Maximum number of hits. (optional, default to 1000)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSimilarFragmentsAsync(String fragmentId, Double cutoff, Integer limit, final ApiCallback<List<Hit>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSimilarFragmentsValidateBeforeCall(fragmentId, cutoff, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Hit>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
