/*
 * Kripo API
 * API to interact with Kripo fragment, fingerprint and similarity data files.
 *
 * OpenAPI spec version: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package nl.esciencecenter.e3dchem.kripodb.ws.client;

import nl.esciencecenter.e3dchem.kripodb.ws.client.ApiCallback;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ApiClient;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ApiException;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ApiResponse;
import nl.esciencecenter.e3dchem.kripodb.ws.client.Configuration;
import nl.esciencecenter.e3dchem.kripodb.ws.client.Pair;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ProgressRequestBody;
import nl.esciencecenter.e3dchem.kripodb.ws.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import nl.esciencecenter.e3dchem.kripodb.ws.client.model.AlignedPharmacophore;
import nl.esciencecenter.e3dchem.kripodb.ws.client.model.Error;
import java.io.File;
import nl.esciencecenter.e3dchem.kripodb.ws.client.model.FragmentNotFound;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PharmacophoresApi {
    private ApiClient apiClient;

    public PharmacophoresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PharmacophoresApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for alignPharmacophore */
    private com.squareup.okhttp.Call alignPharmacophoreCall(String referenceFragmentId, String probeFragmentId, Double cutoff, Integer breakNumCliques, Boolean phar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fragments/{reference_fragment_id}/align/{probe_fragment_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "reference_fragment_id" + "\\}", apiClient.escapeString(referenceFragmentId.toString()))
        .replaceAll("\\{" + "probe_fragment_id" + "\\}", apiClient.escapeString(probeFragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cutoff != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cutoff", cutoff));
        if (breakNumCliques != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "break_num_cliques", breakNumCliques));
        if (phar != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "phar", phar));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call alignPharmacophoreValidateBeforeCall(String referenceFragmentId, String probeFragmentId, Double cutoff, Integer breakNumCliques, Boolean phar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'referenceFragmentId' is set
        if (referenceFragmentId == null) {
            throw new ApiException("Missing the required parameter 'referenceFragmentId' when calling alignPharmacophore(Async)");
        }
        
        // verify the required parameter 'probeFragmentId' is set
        if (probeFragmentId == null) {
            throw new ApiException("Missing the required parameter 'probeFragmentId' when calling alignPharmacophore(Async)");
        }
        
        
        com.squareup.okhttp.Call call = alignPharmacophoreCall(referenceFragmentId, probeFragmentId, cutoff, breakNumCliques, phar, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Align probe pharmacophore to reference pharmacophore
     * Align pharmacophore of the probe fragment id to the pharmacophore of the reference fragment id. Returns the transformation matrix and optionally the aligned probe pharmacophore in phar format. 
     * @param referenceFragmentId Fragment identifier of reference pharmacophore to align to. (required)
     * @param probeFragmentId Fragment identifiers of probe pharmacophores to align. (required)
     * @param cutoff Tolerance threshold for considering two distances to be equivalent (optional, default to 1.0)
     * @param breakNumCliques Break when {break_num_cliques} cliques found. (optional, default to 3000)
     * @param phar Include aligned probe pharmacophore in phar format. (optional, default to false)
     * @return AlignedPharmacophore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AlignedPharmacophore alignPharmacophore(String referenceFragmentId, String probeFragmentId, Double cutoff, Integer breakNumCliques, Boolean phar) throws ApiException {
        ApiResponse<AlignedPharmacophore> resp = alignPharmacophoreWithHttpInfo(referenceFragmentId, probeFragmentId, cutoff, breakNumCliques, phar);
        return resp.getData();
    }

    /**
     * Align probe pharmacophore to reference pharmacophore
     * Align pharmacophore of the probe fragment id to the pharmacophore of the reference fragment id. Returns the transformation matrix and optionally the aligned probe pharmacophore in phar format. 
     * @param referenceFragmentId Fragment identifier of reference pharmacophore to align to. (required)
     * @param probeFragmentId Fragment identifiers of probe pharmacophores to align. (required)
     * @param cutoff Tolerance threshold for considering two distances to be equivalent (optional, default to 1.0)
     * @param breakNumCliques Break when {break_num_cliques} cliques found. (optional, default to 3000)
     * @param phar Include aligned probe pharmacophore in phar format. (optional, default to false)
     * @return ApiResponse&lt;AlignedPharmacophore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AlignedPharmacophore> alignPharmacophoreWithHttpInfo(String referenceFragmentId, String probeFragmentId, Double cutoff, Integer breakNumCliques, Boolean phar) throws ApiException {
        com.squareup.okhttp.Call call = alignPharmacophoreValidateBeforeCall(referenceFragmentId, probeFragmentId, cutoff, breakNumCliques, phar, null, null);
        Type localVarReturnType = new TypeToken<AlignedPharmacophore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Align probe pharmacophore to reference pharmacophore (asynchronously)
     * Align pharmacophore of the probe fragment id to the pharmacophore of the reference fragment id. Returns the transformation matrix and optionally the aligned probe pharmacophore in phar format. 
     * @param referenceFragmentId Fragment identifier of reference pharmacophore to align to. (required)
     * @param probeFragmentId Fragment identifiers of probe pharmacophores to align. (required)
     * @param cutoff Tolerance threshold for considering two distances to be equivalent (optional, default to 1.0)
     * @param breakNumCliques Break when {break_num_cliques} cliques found. (optional, default to 3000)
     * @param phar Include aligned probe pharmacophore in phar format. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call alignPharmacophoreAsync(String referenceFragmentId, String probeFragmentId, Double cutoff, Integer breakNumCliques, Boolean phar, final ApiCallback<AlignedPharmacophore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = alignPharmacophoreValidateBeforeCall(referenceFragmentId, probeFragmentId, cutoff, breakNumCliques, phar, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AlignedPharmacophore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFragmentPhar */
    private com.squareup.okhttp.Call getFragmentPharCall(String fragmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/fragments/{fragment_id}.phar".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "fragment_id" + "\\}", apiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFragmentPharValidateBeforeCall(String fragmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getFragmentPhar(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFragmentPharCall(fragmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pharmacophore of fragment in phar format
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getFragmentPhar(String fragmentId) throws ApiException {
        ApiResponse<File> resp = getFragmentPharWithHttpInfo(fragmentId);
        return resp.getData();
    }

    /**
     * Pharmacophore of fragment in phar format
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getFragmentPharWithHttpInfo(String fragmentId) throws ApiException {
        com.squareup.okhttp.Call call = getFragmentPharValidateBeforeCall(fragmentId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pharmacophore of fragment in phar format (asynchronously)
     * 
     * @param fragmentId Query fragment identifier. e.g. 3j7u_NDP_frag24 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFragmentPharAsync(String fragmentId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFragmentPharValidateBeforeCall(fragmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
